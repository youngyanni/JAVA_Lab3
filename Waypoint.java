/**
 * Этот класс представляет один шаг в пути, созданном алгоритмом поиска пути A *.
 * Путевые точки состоят из местоположения, предыдущей путевой точки на пути и
 * некоторых значений стоимости, используемых для определения наилучшего пути.
 **/
public class Waypoint
{
    /** Расположение этой путевой точки. **/
    Location loc;

    /**
     Предыдущая путевая точка на этом пути или <code> null </code>, если это корень поиска A *.
     **/
    Waypoint prevWaypoint;

    /**
     В этом поле хранится общая предыдущая стоимость перехода от начальной точки
     до этой путевой точки через цепочку путевых точек.
     Это реальная стоимость следования по пути; он не включает никаких оценок.
     **/
    private float prevCost;

    /**
     В этом поле хранится оценка оставшейся стоимости поездки от этой путевой точки до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     Создайте новую путевую точку для указанного местоположения.
     При желании может быть указана предыдущая путевая точка,
     или ссылка может иметь значение <code> null </code>, чтобы указать,
     что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     * Возвращает предыдущую путевую точку в пути или <code> null </code>,
     * если это начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /**
     *Этот мутатор позволяет установить как предыдущую, так и оставшуюся
     * стоимость за один вызов метода. Обычно эти значения все равно устанавливаются одновременно.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость доступа к этой точке из
     * начального местоположения через серию путевых точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости поездки от этого пункта до конечного пункта назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     Возвращает оценку общей стоимости данной путевой точки. Сюда входит фактическая стоимость проезда к этой точке из начальной точки плюс
     оценка оставшейся стоимости поездки от этого пункта до конечного пункта назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

